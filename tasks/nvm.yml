---

# https://github.com/morgangraphics/ansible-role-nvm/issues/18
- name: determine shell in which we are running
  block:

    - name: set default found path
      set_fact:
        mg_found_path: '/usr/bin/bash'

    - name: set bash command
      set_fact:
        mg_user_shell: { 'command': '{{ mg_found_path }} -ic', 'alias': 'bash' }

    - name: does profile file exist
      stat:
        path: "{{ nvm_profile }}"
      become: true
      become_user: rubyadm
      register: mg_profile_file

    - name: Create profile file if it does not exist
      file:
        group: "{{ nvm_user }}"
        owner: "{{ nvm_user }}"
        mode: 0777
        path: "{{ nvm_profile }}"
        state: touch
      when: not mg_profile_file.stat.exists
      become: true
      become_user: rubyadm

  when: nvm_profile | length != 0

# wget (deault) or curl
- name: Installing via curl or wget
  block:
  - name: Check if wget or curl is installed
    command: "which {{ nvm_install }}"
    become: true
    become_user: rubyadm
    register: mg_cmd
    changed_when: "mg_cmd.rc != 0"


  - name: Create nvm_dir if it does not exist
    file:
      group: "{{ nvm_user }}"
      owner: "{{ nvm_user }}"
      mode: 0775
      path: "{{ nvm_dir }}"
      state: directory
    become: true
    become_user: rubyadm
    when: nvm_dir | length != 0

  # There are some potential security concerns with piping the install.sh script to whatever shell alias is defined: Risk is Low but not absolute
  # https://blog.dijit.sh//don-t-pipe-curl-to-bash
  # https://news.ycombinator.com/item?id=12766049
  # https://sandstorm.io/news/2015-09-24-is-curl-bash-insecure-pgp-verified-install
  - name: Install NVM
    shell: "wget -qO- https://raw.githubusercontent.com/creationix/nvm/v{{ nvm_version }}/install.sh | NVM_SOURCE={{ nvm_source }} NVM_DIR={{ nvm_dir }} PROFILE={{ nvm_profile }} {{ mg_user_shell.alias }}"
    become: true
    become_user: rubyadm
    register: mg_nvm_result
    changed_when: "'already installed' not in mg_nvm_result.stdout"
    failed_when:
      - "'permission denied' in mg_nvm_result.stderr"

  - name: Update profile permissions to lock it down after writing
    file:
      group: "{{ nvm_user }}"
      owner: "{{ nvm_user }}"
      mode: 0644
      path: "{{ nvm_profile }}"
    become: true
    become_user: rubyadm
    when: not mg_profile_file.stat.exists

  when: nvm_install in ['curl', 'wget']


# git
- name: install via git
  block:
    - name: Check if git is installed
      command: "which {{ nvm_install }}"
      become: true
      become_user: rubyadm
      register: mg_cmd

    - name: Remove NVM nvm_profile
      blockinfile:
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
        marker_begin: "Installed via {{ role_repo }} START"
        marker_end: "{{ role_repo }} END"
        path: "{{ nvm_profile }}"
        state: absent
      become: true
      become_user: rubyadm

    - name: Install via git
      git:
        dest: "{{ nvm_dir }}"
        repo: 'https://github.com/creationix/nvm.git .nvm'
        version: "{{ nvm_version }}"
      become: true
      become_user: rubyadm
      when: "'/git' in mg_cmd.stdout"

    - name: Add NVM to nvm_profile
      blockinfile:
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
        create: yes
        marker_begin: "Installed nvm via {{ role_repo }} START"
        marker_end: "{{ role_repo }} END"
        mode: 0644
        path: "{{ nvm_profile }}"
        state: present
      become: true
      become_user: rubyadm

  when: "nvm_install == 'git'"

- name: Check NVM Version # noqa 305
  shell: "{{ mg_user_shell.command + ' \"nvm --version\"' }}"
  become: true
  become_user: rubyadm
  register: mg_nvm_version_response
  changed_when: "mg_nvm_version_response.rc != 0"

# Autocomplete
- name: Add NVM autocomplete to nvm_profile
  blockinfile:
    block: |
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    insertafter: "# This loads nvm"
    marker_begin: "Installed nvm autocomplete via {{ role_repo }} START"
    marker_end: "{{ role_repo }} END"
    mode: 0644
    path: "{{ nvm_profile }}"
    state: present
  become: true
  become_user: rubyadm
  when: autocomplete

- name: LTS Check
  set_fact:
    nodejs_version: --lts
  when: "nodejs_version == 'lts'"

# This scenario handles the first run/install of NVM because this will automatically
# alias the specified version as default - This should handle most use cases
- name: Install Node # noqa 305
  shell: "{{ mg_user_shell.command + ' \"nvm install ' +  nodejs_version + '\"' }}"
  become: true
  become_user: rubyadm
  register: mg_node_version_response
  changed_when: "'already installed' not in mg_node_version_response.stderr"

# Test is there is a default already set
- name: Is there a default already set # noqa 305
  shell: "{{ mg_user_shell.command + ' \"cat \\$(printenv NVM_DIR)/alias/default\"' }}"
  become: true
  become_user: rubyadm
  register: mg_nvm_default_response
  changed_when: "mg_nvm_default_response.rc != 0"

# In the event there are multiple versions of Node being installed/used/upgraded
# on the same machine we'll need to alias the default version accordingly
- name: Set default version of Node if multiple versions exist # noqa 305
  shell: "{{ mg_user_shell.command + ' \"nvm alias default ' +  nodejs_version + ' --no-colors\"' }}"
  become: true
  become_user: rubyadm
  when:  default
  changed_when: "'nodejs_version' not in mg_nvm_default_response.stdout"

- name: Check current default Node.js version
  shell: "{{ mg_user_shell.command + ' \"nvm version default\"' }}"
  register: current_version
  changed_when: False
  become: true
  become_user: rubyadm

- name: Set default Node.js version
  shell: "{{ mg_user_shell.command + ' \"' +  item + '\"' }}"
  with_items:
    "{{ nvm_alias_commands }}"
  become: true
  become_user: rubyadm
  when: nvm_alias_commands | length > 0 and current_version.stdout != "v" + nodejs_version

- name: Run whatever nvm_commands are there # noqa 305
  shell: "{{ mg_user_shell.command + ' \"' +  item + '\"' }}"
  with_items:
    "{{ nvm_commands }}"
  become: true
  become_user: rubyadm
  when: nvm_commands | length > 0

# Uninstall NVM
- name: uninstall nvm
  block:

  - name: Uninstall NVM
    file:
      path: "{{ lookup('env','NVM_DIR') }}"
      state: absent
    become: true
    become_user: rubyadm

  - name: Remove NVM nvm_profile info
    lineinfile:
      regexp: '^export.+nvm\"|\[.+nvm'
      path: "{{ nvm_profile }}"
      state: absent
    become: true
    become_user: rubyadm

  - name: Remove NVM autocomplete from nvm_profile
    blockinfile:
      block: |
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      marker_begin: "Installed via {{ role_repo }} START"
      marker_end: "{{ role_repo }} END"
      path: "{{ nvm_profile }}"
      state: absent
    become: true
    become_user: rubyadm

  when: uninstall | bool
